// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"context"
	"database/sql"
	"github.com/google/uuid" // Added import for uuid
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

type Queries struct {
	db DBTX
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db: tx,
	}
}

// Querier defines the interface for all query methods generated by sqlc.
// This is manually defined here because it was not automatically generated by sqlc.
type Querier interface {
	CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error)
	DeleteChirp(ctx context.Context, id uuid.UUID) error
	GetChirp(ctx context.Context, id uuid.UUID) (Chirp, error)
	GetChirps(ctx context.Context, dollar_1 interface{}) ([]Chirp, error)
	GetChirpsByAuthorId(ctx context.Context, arg GetChirpsByAuthorIdParams) ([]Chirp, error)

	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	DeleteAll(ctx context.Context) error // From users.sql.go
	GetUserByEmail(ctx context.Context, email string) (User, error)
	UpdateEmailAndPassword(ctx context.Context, arg UpdateEmailAndPasswordParams) (User, error)
	UpgradeToRed(ctx context.Context, id uuid.UUID) (User, error)

	CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error)
	GetRefreshToken(ctx context.Context, token string) (RefreshToken, error)
	GetUserFromRefreshToken(ctx context.Context, token string) (User, error)
	RevokeToken(ctx context.Context, token string) error
}

// Compile-time check to ensure *Queries implements Querier.
var _ Querier = (*Queries)(nil)
